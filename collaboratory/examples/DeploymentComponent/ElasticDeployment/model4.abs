
/* Example: Web shop with database, and very simple elastic
   monitoring, and load balancing

Part 4:  Adding the clients and the logger

Written by: Einar Broch Johnsen and S. Lizeth Tapia Tarifa
*/

module ScalableWebShop; 
import * from ABS.DC;




 // *************************************************************************************


// The clients
interface Client {
    }

// Client with synchronous calls (i.e., does not flood the system)
class ClosedClient (SE ep, Int cycle, Rat cost, Int nbrOfJobs, Counter c) implements Client {
  Int jobcount = 0;
  Unit run() {
    await duration(cycle, cycle);
    Bool result =  await ep!invokeService(cost);
    if (result == True) {await c!addSuccesses(1);} else {await c!addFails(1);}
    jobcount = jobcount + 1;
    if (jobcount < nbrOfJobs) { this!run(); }
  }
}

// Client with asynchronous calls (i.e., floods the system)
class OpenClient (SE ep, Int cycle, Rat cost, Int nbrOfJobs, Counter c) implements Client {
  Int jobcount = 0;
    Unit run() { 
	Fut<Bool> fresult =  ep!invokeService(cost);
	jobcount = jobcount + 1;
	await duration(cycle, cycle);
	if (jobcount < nbrOfJobs) { this!run(); }
	await fresult?; 
	Bool result = fresult.get;
	if (result == True)  {await c!addSuccesses(1);} else {await c!addFails(1);}
      }
}


interface Database {
  Bool accessData(Duration deadline);
}
class Database (Int transactionCost) implements Database {

  Bool accessData(Duration deadline) {
    Time start = now();
    Int cost = transactionCost;
    while (cost>0) {
    [Cost: 1 ] cost = cost -1; suspend;}
    Rat remainingTime = timeDifference(start,now());    
    return (durationValue(deadline) - remainingTime) > 0;
  }
}

/*
These are basically reusable containers which process jobs.
The scaling in this model is in the number of Workers
*/
interface Worker {
    Bool process(Rat taskCost,  Time started, Duration deadline);
    DC getDC();
}
class WorkerObject(Database db) implements Worker {
  
  Bool process(Rat taskCost, Time started, Duration deadline) {
    [Cost: taskCost] skip;
    Rat spentTime = timeDifference(now(),started);
    Duration remainingTime = subtractFromDuration(deadline, timeDifference(now(),started));
    // When we receive more jobs, this becomes a bottleneck
    Bool success = await db!accessData(remainingTime);  
    return success;
  }
  
  DC getDC(){ return thisDC();}
}

/*
Class to specify LoadBalancer
The LoadBalancer will decide which worker gets the next job
*/
interface LoadBalancer {
  Worker getWorker();
  Unit releaseWorker(Worker w);
  Unit addWorker(Worker w);
  Worker firingWorker();
  Int getNbrAvailableW();
  Int getNbrInuseW();
}

class RoundRobinLoadBalancer()
implements LoadBalancer {
  List<Worker> available = Nil;
  List<Worker> inuse = Nil;

  Unit run(){
      [Cost: 1] skip;
      await duration(1, 1);
      Int naval = await this!getNbrAvailableW();
      println("[Time: "+toString(timeValue(now()))+"] Available workers:"+toString(naval));
      Int ninuse = await this!getNbrInuseW();
      println("[Time: "+toString(timeValue(now()))+"] In use workers:"+toString(ninuse));
      println("***********************************************************************************");
      this!run();
    }

  
    Worker getWorker(){
        [Cost: 1] skip;
	await (available != Nil);
	Worker w = head(available);
	available = tail(available);
	inuse = appendright(inuse,w); 
	return w;
      }

    Unit releaseWorker(Worker w){
        [Cost: 1] skip;
	available = appendright(available,w);
	inuse = without(inuse,w); 
      }

    Unit addWorker(Worker w){
        [Cost: 1] skip;
	available = appendright(available,w);
      }

    Worker firingWorker(){
       [Cost: 1] skip;
       await (available != Nil);
       Worker w = head(reverse(available));
       available =  without(available,w);
       return w;
     }

     Int getNbrAvailableW() {
       [Cost: 1] skip;
       Int a =length(available);     
       return a;}
     
    Int getNbrInuseW() {
      [Cost: 1] skip;
      Int i = length(inuse);
      return i;
    }
      

}

// Class to specify Application API
interface SE { 
    Bool invokeService(Rat cost);
}
class ServiceEndpoint(LoadBalancer lb, Duration responseTime) implements SE {

    Bool invokeService(Rat cost){
      Time started = now();
      [Cost: 1] skip;
      Worker w = await lb!getWorker();
      Bool success = await w!process(cost,started,responseTime);
      await lb!releaseWorker(w);
      // Returns success-handler to client:
      return success;
    }
 }

  //**************** This is an object for accounting things in the model****************

  interface Counter {
  Unit addSuccesses(Int amount);
  Unit addFails(Int amount);
  Unit printSuccess();
  Unit printFail();
}

class Counter() implements Counter {
  Int success = 0;
  Int fail = 0;
  
  Unit addSuccesses(Int amount) {success = success+amount;}

  Unit addFails(Int amount){fail = fail+amount;}

  Unit printSuccess(){println("[Time: "+toString(timeValue(now()))+"] ***********************************Total successes:"+ toString(success));}
  Unit printFail(){println("[Time: "+toString(timeValue(now()))+"] **************************************Total Fails:"+ toString(fail));}

}
 //****************************************************


{ // Main block

  CloudProvider cloud = new CloudProvider("cloud");
  println("[Time: "+toString(timeValue(now()))+"] Created the CloudProvider");

  // Parameters 
  Int nResources = 25;
  Int nWorkers=15;
  Duration respTime = Duration(5);
  Int nCloseClients = 4;
  Int nOpenClients = 10;   
  Rat taskCost = 81; 
  Int nbrOfJobs = 2;

  // Create server machines
  DC frontendServer = await cloud!launchInstance(map[Pair(Speed, 35)]);
  DC backendServer = await cloud!launchInstance(map[Pair(Speed, 20)]);

  // Deploy the system
  [DC: backendServer] Database db = new Database(2);
  [DC: frontendServer] LoadBalancer lb = new RoundRobinLoadBalancer();
  [DC: frontendServer] SE endpoint = new ServiceEndpoint(lb, respTime);

    Counter c = new Counter();
    
//start workekers on the cloud
     Int ctr = 0;
      while (ctr<nWorkers) {
	// No release point here!
	Fut<DC> fs =  cloud!launchInstance(map[Pair(Speed, nResources)]);
	DC vm = fs.get;
	[DC: vm] Worker w = new WorkerObject(db);
        lb!addWorker(w);
	Time startTime = await vm!getCreationTime();
	ctr=ctr+1;
      }
      println("[Time: "+toString(timeValue(now()))+"] ******INIT: CREATED "+toString(nWorkers)+" WORKERS");

      await duration(5,5);


    // Start up the close clients
    Int nClients = nCloseClients;
    while (nClients > 0) {
	// closed client scenario:
         new ClosedClient(endpoint, 2 ,taskCost, nbrOfJobs,c);
        nClients = nClients - 1;
    }
    println("[Time: "+toString(timeValue(now()))+"] ********CREATED " +toString(nCloseClients)+"  CLOSE CLIENTS WITH "  +toString(nbrOfJobs)+ " JOBS EACH");


    await duration(5,5);

    // Start up the open clients
    nClients = nOpenClients;
    while (nClients > 0) {
       // open client scenario:
        new OpenClient(endpoint, 1, taskCost, nbrOfJobs,c);
        nClients = nClients - 1;
    }

    println("[Time: "+toString(timeValue(now()))+"] *******CREATED " +toString(nOpenClients)+"  OPEN CLIENTS  WITH "  +toString(nbrOfJobs)+ " JOBS EACH");

    await duration(5,5);
    
    // Start up the close clients
    nClients = nCloseClients;
    while (nClients > 0) {
	// closed client scenario:
         new ClosedClient(endpoint, 2,taskCost, nbrOfJobs,c);
        nClients = nClients - 1;
    }
    println("[Time: "+toString(timeValue(now()))+"] *******CREATED " +toString(nCloseClients)+"  CLOSE CLIENTS  WITH "  +toString(nbrOfJobs)+ " JOBS EACH");

    await duration(5,5);

    // Start up the open clients
    nClients = nOpenClients;
    while (nClients > 0) {
       // open client scenario:
        new OpenClient(endpoint, 1, taskCost, nbrOfJobs,c);
        nClients = nClients - 1;
    }

      println("[Time: "+toString(timeValue(now()))+"] ******CREATED " +toString(nOpenClients)+"  OPEN CLIENTS  WITH "  +toString(nbrOfJobs)+ " JOBS EACH");


    await duration(10,10);
    await c!printSuccess();
    await c!printFail();
  }


// Local Variables:
// abs-indent: 2
// abs-target-language: erlang
// abs-clock-limit: 30
// End:
