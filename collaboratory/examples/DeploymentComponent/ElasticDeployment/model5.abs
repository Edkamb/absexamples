/* 
Example: Web shop with database, and very simple  
monitoring,  load balancing and autoscaler


Written by: Einar Broch Johnsen and S. Lizeth Tapia Tarifa
*/

module ScalableWebShop; 
import * from ABS.DC;


//************** For the accounting of the usage of resources**********************
type MachineUseLog =  Map<DeploymentComponent,Pair<Time,Maybe<Time>>>;


def Rat calcCost( MachineUseLog ml, Int cost, Int interval, Time now) =
     case ml{
       InsertAssoc(Pair(id, Pair(s,e)), mlt) => (costMachine(s,e,now)/interval)*cost + calcCost(mlt, cost, interval,now);
	 EmptyMap => 0;
       };

def Rat costMachine(Time start ,Maybe<Time> end ,Time now) =
case end {
  Nothing => timeDifference(start, now);
  Just(e) => timeDifference(start, e);
};

def Map<A, B> mapTail<A, B>(Map<A, B> map) = // remove the tail of the map
  case map {
  	EmptyMap => map;
    InsertAssoc(head, tail) => tail;
  };

  def Pair<A, B> mapHead<A, B>(Map<A, B> map, Pair<A,B> default) = // remove the head of the map
  case map {
    EmptyMap => default;
    InsertAssoc(head, tail) => head;
  };

 // *************************************************************************************

  

// The clients
interface Client {
    }

// Client with synchronous calls (i.e., does not flood the system)
class ClosedClient (SE ep, Int cycle, Rat cost, Int nbrOfJobs, Counter c) implements Client {
  Int jobcount = 0;
  Unit run() {
    await duration(cycle, cycle);
    Bool result =  await ep!invokeService(cost);
    if (result == True) {await c!addSuccesses(1);} else {await c!addFails(1);}
    jobcount = jobcount + 1;
    if (jobcount < nbrOfJobs) { this!run(); }
  }
}

// Client with asynchronous calls (i.e., floods the system)
class OpenClient (SE ep, Int cycle, Rat cost, Int nbrOfJobs, Counter c) implements Client {
  Int jobcount = 0;
    Unit run() { 
	Fut<Bool> fresult =  ep!invokeService(cost);
	jobcount = jobcount + 1;
	await duration(cycle, cycle);
	if (jobcount < nbrOfJobs) { this!run(); }
	await fresult?; 
	Bool result = fresult.get;
	if (result == True)  {await c!addSuccesses(1);} else {await c!addFails(1);}
      }
}



interface Database {
  Bool accessData(Duration deadline);
}
class Database (Int transactionCost) implements Database {

  Bool accessData(Duration deadline) {
    Time start = now();
    Int cost = transactionCost;
    while (cost>0) {
    [Cost: 1 ] cost = cost -1; suspend;}
    Rat remainingTime = timeDifference(start,now());
    return (durationValue(deadline) - remainingTime) > 0;
  }
}


interface Worker {
    Bool process(Rat taskCost,  Time started, Duration deadline);
    DC getDC();
}
class WorkerObject(Database db) implements Worker {
  
  Bool process(Rat taskCost, Time started, Duration deadline) {
    [Cost: taskCost] skip;                                  
    Rat spentTime = timeDifference(now(),started);
    Duration remainingTime = subtractFromDuration(deadline, timeDifference(started,now()));
    Bool success = await db!accessData(remainingTime);  
    return success;
  }
  
  DC getDC(){ return thisDC();}
}

/*
Class to specify LoadBalancer
The LoadBalancer will decide which worker gets the next job
*/
interface LoadBalancer {
  Worker getWorker();
  Unit releaseWorker(Worker w);
  Unit addWorker(Worker w);
  Worker firingWorker();
  Int getNbrAvailableW();
  Int getNbrInuseW();
}

class RoundRobinLoadBalancer()
implements LoadBalancer {
  List<Worker> available = Nil;
  List<Worker> inuse = Nil;

    Unit run(){
      [Cost: 1] skip;
      await duration(1, 1);
      Int naval = await this!getNbrAvailableW();
      println("[Time: "+toString(timeValue(now()))+"] Available workers:"+toString(naval));
      Int ninuse = await this!getNbrInuseW();
      println("[Time: "+toString(timeValue(now()))+"] In use workers:"+toString(ninuse));
      println("[Time: "+toString(timeValue(now()))+"] NUMBER OF WORKERS IS "+toString(naval+ninuse));
      println("***********************************************************************************");
      this!run();
    }

  
    Worker getWorker(){
      [Cost: 1] skip;
	await (available != Nil);
	Worker w = head(available);
	available = tail(available);
	inuse = appendright(inuse,w); 
	return w;
      }

    Unit releaseWorker(Worker w){
      [Cost: 1] skip;
	available = appendright(available,w);
	inuse = without(inuse,w); 
      }

    Unit addWorker(Worker w){
      [Cost: 1] skip;
	available = appendright(available,w);
      }

    Worker firingWorker(){
      [Cost: 1] skip;
       await (available != Nil);
       Worker w = head(reverse(available));
       available =  without(available,w);
       return w;
     }

     Int getNbrAvailableW() {
       [Cost: 1] skip;
       Int a =length(available);
       return a;}
     
    Int getNbrInuseW() {
      [Cost: 1] skip;
      Int i = length(inuse);
      return i;
    }
      

}

interface Autoscaler {}


class Autoscaler(CloudProvider cloud, LoadBalancer lb, Int nbrOfWorkers, Int maxWorkers, Int nResources,Database db, Int cycle, Counter c)
implements Autoscaler {
  Unit run(){
    [Cost: 1] skip;
      Int ctr = 0;
      while (ctr<nbrOfWorkers) {
	Fut<DC> fs =  cloud!launchInstance(map[Pair(Speed, nResources)]);
	DC vm = fs.get;
	[DC: vm] Worker w = new WorkerObject(db);
        lb!addWorker(w);
	Time startTime = await vm!getCreationTime();
	await c!addMachine(vm,startTime);
	ctr=ctr+1;
      }
      println("[Time: "+toString(timeValue(now()))+"] ***********INIT: CREATED "+toString(nbrOfWorkers)+" WORKERS");
      this!resize();
    }

    
    Unit resize(){
      [Cost: 2] skip;
      Int ctr = 0;
      await duration(cycle, cycle);
      Int available = await lb!getNbrAvailableW();
      Int inuse = await lb!getNbrInuseW();
      
      if (available < ((available+inuse)/4) && (available+inuse)<=maxWorkers/2)
      {
	ctr = 0;
	Rat extraworkers= inuse;
        while (ctr<extraworkers ) {
	  Fut<DC> fs =  cloud!launchInstance(map[Pair(Speed, nResources)]);
	  DC vm = fs.get;
	  [DC: vm] Worker w = new WorkerObject(db);
	  await lb!addWorker(w);
	  Time startTime = await vm!getCreationTime();
 	  await c!addMachine(vm,startTime);
	  ctr=ctr+1;
	}
      }

      if ((inuse/3 < available) && (available > nbrOfWorkers))
      {
	ctr = 0;
	Rat removeworkers= available/2;
        while (ctr<removeworkers) {
	  Worker w = await lb!firingWorker();
	  DC dc = await w!getDC();
          Bool down = await cloud!shutdownInstance(dc);
	  await  c!addShutdown(dc, now());
	  ctr=ctr+1;
	}
      }
      this!resize();     
    }
 }


// Class to specify Application API
interface SE { 
    Bool invokeService(Rat cost);
}
class ServiceEndpoint(LoadBalancer lb, Duration responseTime) implements SE {

  Bool invokeService(Rat cost){
      Time started = now();
      [Cost: 1] skip;
      Worker w = await lb!getWorker();
      Bool success = await w!process(cost,started,responseTime);
      await lb!releaseWorker(w);
      return success;
    }

  }


    //**************** This is an object for accounting things in the model****************

interface Counter {
  Unit addSuccesses(Int amount);
  Unit addFails(Int amount);
  Unit addMachine(DeploymentComponent id, Time startup);
  Unit addShutdown(DeploymentComponent id, Time shutdown);
  Unit printSuccess();
  Unit printFail();
  Unit calculateCost(Int cost, Int interval,Time until);
  Unit printMachineUseLog();

}

class Counter() implements Counter {
  Int success = 0;
  Int fail = 0;
  Int cost = 0;

  MachineUseLog machines = EmptyMap;
  
  Unit addSuccesses(Int amount) {success = success+amount;}

  Unit addFails(Int amount){fail = fail+amount;}

  Unit printSuccess(){println("[Time: "+toString(timeValue(now()))+"] ***********************************Total successes:"+ toString(success));}
  Unit printFail(){println("[Time: "+toString(timeValue(now()))+"] **************************************Total Fails:"+ toString(fail));}

  Unit addMachine(DeploymentComponent id, Time startup){
    machines =  InsertAssoc(Pair(id,Pair(startup,Nothing)), machines);
  }
  Unit addShutdown(DeploymentComponent id, Time shutdown){
    Pair<Time,Maybe<Time>> tmp = lookupDefault(machines, id,Pair(Time(-1),Nothing));
    
    machines = InsertAssoc(Pair(id, Pair(fst(tmp),Just(shutdown))), removeKey(machines, id));
  }

  Unit calculateCost(Int cost, Int interval,Time until){
    Rat calculatedCost = calcCost(machines, cost, interval, until);
    println("[Time: "+toString(timeValue(now()))+"] **************************************Total Cost on the cloud (until time " +toString(timeValue(now()))+ "):"+ toString(calculatedCost));
  }

  Unit printMachineUseLog(){
      MachineUseLog tmp =  machines;
      DeploymentComponent tdc = null;
      while (tmp != EmptyMap) {	
	Pair<DeploymentComponent,Pair<Time,Maybe<Time>>> head = mapHead(tmp,Pair(tdc,Pair(Time(-1),Nothing)));
	DeploymentComponent dc = fst(head);
	String name = await dc!getName();
	Pair<Time,Maybe<Time>> tmptime = snd(head);
	Time frmt = fst(tmptime);
	Maybe<Time> tot = snd(tmptime);

	 if  (tot != Nothing){
	   println("[Time: "+toString(timeValue(now()))+"]"+name+"->("+toString(timeValue(frmt))+","+toString(timeValue(fromJust(tot)))+")");
	 }else{
	   println("[Time: "+toString(timeValue(now()))+"]"+name+"->("+toString(timeValue(frmt))+",-)");
	  }
	 tmp = mapTail(tmp);	
	}
      }

}
 //****************************************************

{ // Main block

   CloudProvider cloud = new CloudProvider("cloud");
  println("[Time: "+toString(timeValue(now()))+"] Created the CloudProvider");

  // Parameters:
   Int nResources = 25;
   Int nWorkers=4;
   Int maxWorkers = 25;
   Int interval = 1;
   Duration respTime = Duration(5);
   Int nCloseClients = 4;
   Int nOpenClients = 10;
   Rat taskCost = 81; 
   Int nbrOfJobs = 2;
   Int cost = 50;

   Counter c = new Counter(); 

  // Create server machines
    DC frontendServer = await cloud!launchInstance(map[Pair(Speed, 35)]);
    DC  backendServer = await cloud!launchInstance(map[Pair(Speed, 20)]);

  // Deploy the system
    [DC: backendServer] Database db = new Database(2);
    [DC: frontendServer] LoadBalancer lb = new RoundRobinLoadBalancer();
    [DC: frontendServer] Autoscaler as = new Autoscaler(cloud,lb,nWorkers,maxWorkers, nResources,db,interval, c);
    [DC: frontendServer] SE endpoint = new ServiceEndpoint(lb, respTime);


    await duration(10,10);    

    // Start up the close clients
    Int nClients = nCloseClients;
    while (nClients > 0) {
	// closed client scenario:
         new ClosedClient(endpoint, 2,taskCost, nbrOfJobs,c);
        nClients = nClients - 1;
    }
   println("[Time: "+toString(timeValue(now()))+"] *********CREATED " +toString(nCloseClients)+" CLOSE CLIENTS  WITH "  +toString(nbrOfJobs)+ " JOBS EACH");
   

    await duration(10,10);

    // Start up the open clients
    nClients = nOpenClients;
    while (nClients > 0) {
       // open client scenario:
        new OpenClient(endpoint, 1, taskCost, nbrOfJobs,c);
        nClients = nClients - 1;
    }
    println("[Time: "+toString(timeValue(now()))+"] ********CREATED " +toString(nOpenClients)+" OPEN CLIENTS  WITH "  +toString(nbrOfJobs)+ " JOBS EACH");

    await duration(10,10);
    
    // Start up the close clients
    nClients = nCloseClients;
    while (nClients > 0) {
	// closed client scenario:
         new ClosedClient(endpoint, 2,taskCost, nbrOfJobs,c);
        nClients = nClients - 1;
    }
  println("[Time: "+toString(timeValue(now()))+"] **********CREATED " +toString(nCloseClients)+" CLOSE CLIENTS  WITH "  +toString(nbrOfJobs)+ " JOBS EACH");

    await duration(10,10);

    // Start up the open clients
    nClients = nOpenClients;
    while (nClients > 0) {
       // open client scenario:
        new OpenClient(endpoint, 1, taskCost, nbrOfJobs,c);
        nClients = nClients - 1;
    }
    println("[Time: "+toString(timeValue(now()))+"] CREATED " +toString(nOpenClients)+"  OPEN CLIENTS  WITH "  +toString(nbrOfJobs)+ " JOBS EACH");

    await duration(10,10);
    await c!printSuccess();
    await c!printFail();



   await c!calculateCost(cost,interval,now());
   await c!printMachineUseLog();
    
  }


// Local Variables:
// abs-indent: 2
// abs-target-language: erlang
// abs-clock-limit: 50
// End:

  